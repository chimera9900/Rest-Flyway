package com.developer.storesws.service;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.UUID;

import org.flywaydb.core.internal.jdbc.JdbcTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.developer.storesws.model.Store;

@Service
public class StoreService {
	@Autowired
	JdbcTemplate jdbc;
	
	public UUID addStore(Store store) throws SQLException {
		UUID uuid = UUID.randomUUID();
		String sql = "insert into store (url, uuid, version) value(?, ?, 1)";
		jdbc.update(sql, store.getUrl(), uuid);
		return uuid;
		
	}
	
	public Store find(UUID id) {
		String sql = "select * from store where id = ?";
		jdbc.query(sql, new BeanPropertyRowMapper(Store.class), id);
		return Optional.of(storeDao.findByUuid(id))
				.orElseThrow(() -> new NoSuchElementException());
	}
	
	public Collection<Store> findAll() {
		String sql = "select * from store";
		jdbc.query(sql, () -> ;
		Collection<Store> list = new ArrayList<Store>();
		storeDao.findAll().forEach(x -> list.add(x));
		return list;
}
	
	public Store updateStore(UUID id, Store store) {
		find(id);
		return storeDao.save(store.withUuid(id));
	}

	public void remove(UUID id) {
		find(id);
		storeDao.delete(find(id));
	}
}

class StoreRowMapper implements RowMapper<Store>{
	@Override
	public Store mapRow(ResultSet rs, int rowNum) throws SQLException {
		Store store = new Store();
		store.setUrl(rs.getString("url"));
		store.setUuid(rs.getObject("uuid", UUID.class));
		store.setVersion(rs.getInt("version"));
		return store;
	}
}