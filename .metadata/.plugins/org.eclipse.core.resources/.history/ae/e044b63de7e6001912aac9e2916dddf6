package com.developer.storesws;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.hateoas.config.EnableHypermediaSupport;
import org.springframework.hateoas.config.EnableHypermediaSupport.HypermediaType;

@EnableHypermediaSupport(type = HypermediaType.HAL)
@SpringBootApplication
public class StoresWsApplication {

	public static void main(String[] args) {
		SpringApplication.run(StoresWsApplication.class, args);
	}
	
	  @Configuration
	    public static class Cfg {
	        @Bean @Primary
	        public ObjectMapper objectMapper(@Qualifier("_halObjectMapper") ObjectMapper objectMapper) {
	            return objectMapper;
	        }
	        @Bean
	        public HalObjectMapperConfigurer halObjectMapperConfigurer() {
	            return new HalObjectMapperConfigurer();
	        }

	        /**
	         * {@link BeanPostProcessor} to apply any {@link Jackson2ObjectMapperBuilder}
	         * configuration to the HAL {@link ObjectMapper}.
	         */
	         class HalObjectMapperConfigurer
	                implements BeanPostProcessor, BeanFactoryAware {

	            private BeanFactory beanFactory;

	            @Override
	            public Object postProcessBeforeInitialization(Object bean, String beanName)
	                    throws BeansException {
	                if (bean instanceof ObjectMapper && "_halObjectMapper".equals(beanName)) {
	                    postProcessHalObjectMapper((ObjectMapper) bean);
	                }
	                return bean;
	            }

	            private void postProcessHalObjectMapper(ObjectMapper objectMapper) {
	                try {
	                    Jackson2ObjectMapperBuilder builder = this.beanFactory
	                            .getBean(Jackson2ObjectMapperBuilder.class);
	                    builder.configure(objectMapper);
	                } catch (NoSuchBeanDefinitionException ex) {
	                    // No Jackson configuration required
	                }
	            }

	            @Override
	            public Object postProcessAfterInitialization(Object bean, String beanName)
	                    throws BeansException {
	                return bean;
	            }

	            @Override
	            public void setBeanFactory(BeanFactory beanFactory) throws BeansException {
	                this.beanFactory = beanFactory;
	            }

	        }

	    }


}
