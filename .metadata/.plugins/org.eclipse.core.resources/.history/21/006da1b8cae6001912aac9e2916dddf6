package com.developer.storesws.service;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.UUID;

import org.flywaydb.core.internal.jdbc.JdbcTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.OptimisticLockingFailureException;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.developer.storesws.model.Store;

@Service
public class StoreService {
	@Autowired
	NamedParameterJdbcTemplate jdbc;
	
	public UUID addStore(Store store)  {
		UUID uuid = UUID.randomUUID();
		String sql = "insert into store (url, uuid, version) values(:url, :uuid, 1)";
		jdbc.update(sql, new MapSqlParameterSource("url", store.getUrl())
				.addValue("uuid", uuid));
		return uuid;
		
	}
	
	public Store find(UUID id) {
		String sql = "select * from store where uuid = :uuid";
		try {
			return jdbc.queryForObject(sql, new MapSqlParameterSource("uuid", id), new StoreRowMapper());
		}catch(NoSuchElementException e) {
			throw new NoSuchElementException();
		}
	}
	
	public Collection<Store> findAll() {
		String sql = "select * from store";
		List<Store> list = jdbc.query(sql, new StoreRowMapper());
		return list;
}
	
	public Store updateStore(UUID id, Store store) {
		find(id);
		String sql = "update store set url=:url, version = version + 1 where uuid=:uuid";
		int i = jdbc.update(sql, new MapSqlParameterSource("url", store.getUrl())
				.addValue("uuid", id));
		if(i!=1) throw new OptimisticLockingFailureException("Stale update detected for " + store.getUuid());
		return find(id);
	}

	public void remove(UUID id) {
		find(id);
		String sql = "delete from store where id = :id";
		jdbc.update(sql, new MapSqlParameterSource("uuid", id));
	}
}

class StoreRowMapper implements RowMapper<Store>{
	@Override
	public Store mapRow(ResultSet rs, int rowNum) throws SQLException {
		Store store = new Store();
		store.setUrl(rs.getString("url"));
		store.setUuid(rs.getObject("uuid", UUID.class));
		store.setVersion(rs.getInt("version"));
		return store;
	}
}